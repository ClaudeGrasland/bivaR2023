# R-Base

{{< include _setup.qmd >}}


```{r, echo = FALSE}
library(knitr)
knitr::include_graphics("resources/figures/chap3_intro.jpg")
```


- **Mise en place** : Télécharger le [dossier exo3](https://github.com/ClaudeGrasland/startR/raw/master/resources/exos/exo3.zip) et décompressez le sur votre ordinateur. Puis ouvrez le projet R `exo3.Rproj` dans Rstudio.

L'idée pédagogique est d'apprendre directement aux étudiants à programmer en R markdown plutôt qu'en R. Pourquoi ? Parce qu'ainsi ils vont simultanément :

- taper du code R qu'ils ignorent
- écrire sous ce code les explications du point de vue informatique
- observer les résultats statistiques
- interpréter ces résultats d'un point de vue statistique

Cela n'a l'air de rien, mais en procédant ainsi les étudiants apprennent à produire à la fois leurs notes de cours en R, leurs notes de cours en statistiques et ... le langage Rmarkdown pour rédiger leurs futurs travaux.

Bref, si tout a bien marché, l'étudiant n'aura même pas besoin de consulter le présent document, si ce n'est pour vérifier que son programme donne les mêmes résultats ...


Les deux exercices qui suivent utilisent volontairement les fonctions de base du langage R (on dit que l'on *programme en R-base*) à l'exclusion de tout *package* c'est-à-dire de tout outil graphique ou statistique mis au point ultérieurement. 

Par comparaison avec le jeu de lego, cela revient à effectuer des constructions avec la boîte de base. A première vue cela peut sembler frustrant. Mais en réalité cela ne bride en rien l'imagination et permet d'apprendre plein de choses sans être distrait ...




1. **La manipulation des tableaux de données** : c'est-à-dire à la fois l'importation, le recodage éventuel des variables et la correction de leur type, la sélection de lignes ou de colonnes pour créer des sous-tableaux.
2. **L'exploration statistique univariée** : c'est-à-dire le calcul de résumés simples d'une variable à l'aide de paramètres statistiques (valeurs centrales, dispersion) et la production de graphiques élémentaires. 

Pour rendre l'apprentissage moins austère, nous avons choisi un tableau de données original qui présente les principales caractéristiques de 25 pays européens en 1989, à la veille de la chute du Mur de Berlin. Pour ceux qui ne connaissent pas cette période ancienne, voici une petite carte :

```{r, echo = FALSE}
library(knitr)
knitr::include_graphics("resources/figures/iron-curtain.jpg")
```

Plutôt que de se contenter apprendre par coeur des commandes R (ce qu'il faudra faire, évidemment), les étudiants seront amenés à construire un véritable rapport sur la situation économique, démographique et sociale de l'Europe en 1989, ce qui les amènera à renforcer leur pratique du R markdown. Par ailleurs, on organisera un débat entre les étudiants qui seront placés en deux groupes rivaux chargés de défendre respectivement les pays socialistes et lespays capitalistes. A chaque groupe de montrer que son système politique est le meilleur ...


## Tableaux

### Importation

#### Localisation des fichiers

- La commande `getwd()` permet de connaître la position du répertoire courant. Si vous avez ouvert un projet (ce qui est vivement recommandé) la localisation est l'emplacement du fichier .Rproj.

```{r}
getwd() 
```


- La commande `list.files()` permet d'examiner le contenu du répertoire courant

```{r}
list.files()
```



#### Chargement d'un fichier texte

- Avec la souris

Cliquer sur les menus déroulants **File/Import Dataset/From text (base)** puis suivre le menu

```{r, echo = FALSE}
library(knitr)
knitr::include_graphics("resources/figures/img001.jpeg")
```




- Avec des lignes de code

On utilise par exemple la fonction `read.table()` en précisant les paramètres utiles :

```{r}
euro1988 <- read.table(file = "resources/data/europe88/euro1988.csv", # nom du fichier et chemin d'accès
                  sep = ";",                     # séparateur (ici, des points-virgule)
                  header = TRUE,                 # ligne d'en-tête avec le nom des variables
                  encoding="UTF-8")              # encodage adapté au français
```



#### Dimensions d'un tableau

- La fonction `dim()` fournit les dimensions d'un tableau

```{r}
dim(euro1988)
```

- La fonction `class()` fournit le type d'un tableau

```{r}
class(euro1988)
```


#### Visualisation du contenu d'un tableau

- Premières lignes avec `head()`

```{r}
head(euro1988)         # Affiche par défaut les 6 premières lignes
```

- Dernières lignes avec `tail()`

```{r}
tail(euro1988,2)         # Affiche les 2 dernières lignes
```



#### Verification des variables

- Vérifie le type avec `str()`

```{r}
str(euro1988)
```


- Recode avec les fonctions `as.xxx()`

```{r}
euro1988$BLOC<-as.factor(euro1988$PAYS)
str(euro1988)
```


#### Résume  du tableau

La fonction `summary()` donne un aperçu général des variables

```{r}
summary(euro1988)
```



### Transformations


#### Copie intégrale 

Elle s'effectue avec l'opérateur  `<-`

```{r}
tab<-euro1988
dim(tab)
head(tab,2)
tail(tab,2)
```


#### Sélection de lignes

On utilise la syntaxe `tab2<-tab[conditions , ]` avec  les opérateurs logiques suivants


- **==** : est égal à
- **!=** : est différent de 
- **> ** : est strictement supérieur à 
- **< ** : est strictement inférieur à 
- **>=** : est supérieur ou égal à 
- **<=** : est inférieur ou égal à  
- **&**  : ET (vrai si les deux conditions sont vérifiées)
- **|**  : OU inclusif (vrai si l'une des conditions est vérifiée)
- **xor** : OU exclusif (vrai si une seule des conditions est vérifiée)



- Exemple de sélection des pays socialistes

```{r}
tabsoc<-euro1988[euro1988$BLOC=="Soc",]
tabsoc
```

- Exemple de sélection des pays non socialistes

```{r}
tabcap<-euro1988[euro1988$BLOC!="Soc",]
tabcap
```


- Exemple de sélection des pays de plus 10 millions d'habitant

```{r}
tabbig<-euro1988[euro1988$POP>20,]
tabbig
```


- Exemple de sélection des pays socialistes de plus 20 millions d'habitant (on mélange deux conditions avec l'opérateur `&`)

```{r}
tabsocbig<-euro1988[euro1988$BLOC=="Soc" & euro1988$POP>20,]
tabsocbig
```


#### Sélection de colonnes

On utilise la syntaxe `tab2<-tab[  ,  liste ]` avec différentes  syntaxes pour les listes de variables :


- Sélection nominale

```{r}
tab<-euro1988[,c("PAYS", "BLOC", "PNB", "TMI","POP")]
head(tab,2)
```

- Sélection de positions 

```{r}
tab<-euro1988[,c(1:4, 13)]
head(tab,2)
```


#### Sélection simultanée de lignes et colonnes

On utilise la syntaxe `tab2<-tab[ conditions ,  liste]` 

- Exemple : PNB et BLOC des pays de moins de 5 millions d'habitant

```{r}
tab<-euro1988[euro1988$POP<5, c("PAYS","BLOC","POP","PNB")]
tab
```



### Extractions

#### Extraction d'une Variable = Vecteur

- Solution n°1 : utilisation de l'opérateur `$`

```{r}
myvar<-euro1988$POP
str(myvar)
mean(myvar)
```

-Solution n°2 : utilisation de  `[ , ]`

```{r}
myvar<-euro1988[,13]
str(myvar)
mean(myvar)
```



#### Création d'une matrice 

On sélectionne les lignes et les colonnes puis on convertit en matrice avec l'instruction `as.matrix()`. Attention, les variables doivent être de même type (toutes numériques ou toutes caractère ou ...), sinon R effectue une conversion forcée. 

-  **Exemple 1 : création d'une matrice de corrélation**

On commence par extraire trois variables du tableau pour en faire une matrice :

```{r}
mymat<-euro1988[,c("PNB","TMI","FEC")]
row.names(mymat)<-euro1988$PAYS  # facultatif : donne le nom des lignes
str(mymat)
mymat<-as.matrix(mymat)
str(mymat)
```


Puis on applique la fonction `cor()` à cette matrice pour en faire une matrice de corrélation ; 

```{r}
mycor<-cor(mymat)
mycor
str(mycor)
```



- **Exemple 2 : Création d'une matrice de distance**

On commence par extraire les coordonnées (X,Y) sous forme de matrice

```{r}
matcoo<-as.matrix(euro1988[,c("X","Y")])
row.names(matcoo)<-euro1988$PAYS  # facultatif : donne le nom des lignes
str(matcoo)
head(matcoo)
```


Puis on transforme ces coordonnées en distance à l'aide de la fonction `dist()`

```{r}
matdis<-as.matrix(dist(matcoo))
str(matdis)
matdis[1:10,1:5]
```


Et on calcule le pays le plus proche de tous les autres à l'aide de la fonction `apply()` (qu'on verra ultérieurement dans un autre chapitre)

```{r}
mean(matdis)
access<-apply(matdis, FUN=mean,1)
access<-access[order(access)]
round(access,0)
```



## Exploration I (*var. quali.*)

### Sélection et recodage

Les variables qualitatives nominales ou *factor* sont des objets composés d'une liste de numéros et d'une liste d'étiquettes. 

```{r quali1}
# Chargement du tableau de données
don <- read.table(file = "resources/data/europe88/euro1988.csv", # nom du fichier et chemin d'accès
                  sep = ";",                     # séparateur (ici, des points-virgule)
                  header = TRUE,                 # ligne d'en-tête avec le nom des variables
                  encoding="UTF-8")              # encodage adapté au français

# Extraction de la variable
X<-don$BLOC
X

# Vérification du type
str(X)
```

Si la variable chargée est de type *character* il faut la transformer avec `as.factor()` et repérer les niveaux disponibles avec `levels()`

```{r}
X<-as.factor(X)
class(X)
levels(X)
```

On peut remplacer les niveaux en utilisant l'instruction `levels() `à nouveau, mais suivie d'un vecteur de charactères indiquant les changements de nom. 

```{r quali2}

levels(X)<-c("Capitaliste",
             "Socialiste")
X
str(X)
```

On peut transformer une variable quantitative en facteur avec la fonction `cut()`

```{r quali3}
Y<-cut(don$POP, breaks=c(0,10,30,100))
Y
str(Y)

```



On peut ensuite recoder les classes avec `levels()`

```{r quali4}
levels(Y)<-c("Petit","Moyen","Grand")
Y
str(Y)
```


### Table de dénombrement

Pour dénomber une variable qualitative, on utilise l'instruction `table()` qui crée un objet particulier qui n'est ni un *data.frame*, ni une *matrix*.

```{r table}
tab<-table(X)
tab
str(tab)
```


On peut créer des tables à 2, 3 ou 4 dimensions

```{r table2}
tab2<-table(X,Y)
tab2
str(tab2)
```


Un objet de type *table* peut être manipulé par des fonctions spéciales comme `addmargins()` quii rajoute des sommes en ligne (et en colonne si la table est de dimension 2)

```{r table3}
addmargins(tab)
addmargins(tab2)
```


::: {.callout-note}
Les objets de type  `table` sont souvent la source de crises de nerf de la part des étudiants qui les confondent avec des objets de type `vecteur`, `matrice` ou `data.frame`. Il existe des fonctions de conversion d'un type vers un autre mais leur emploi n'est pas très simple. 

On retiendra donc dans l'immédiat que les résultats de l'instruction `table`sont des **objets transitoires** qui servent uniquement à afficher des résultats ou produire des graphiques à l'aide des instructions `plot()` ou `barplot()`.
:::





### Graphique avec plot()

La fonction `plot()` s'applique à la plupart de objets R. Elle produit des résultats différents selon le type d'objet qu'elle a identifié. Si on l'applique à un vecteur de type factor on obtient un **diagramme en bâtons** (à ne pas confondre avec un histogramme) 

```{r plot}
plot(X)
```


On peut améliorer le graphique en lui ajoutant des *paramètres* c'est-à-dire des instructions séparées par des virgules. Le retour à la ligne après chaque paramètre n'est pas obligatoire mais il est recommandé car il rend le code plus clair. 

```{r, plot2}
plot(X,
     col=c("blue","red"), 
     main= "Europe en 1988",
     xlab = "Type politique", 
     ylab = "Nombre de pays")
```







## Exploration II (*var. quanti*)

### Résumés numériques


Une variable numérique peut faire l'objet d'un ensemble de résumés statistiques à l'aide de fonctions élémentaires

- `min()`   : minimum
- `max()`   : maximum
- `mean()`  : moyenne
- `sd()`    : écart-type (en anglais : *standard deviation*, soit *sd* en abrégé)
- `sum()`   : somme



```{r}
X <- don$FEC
min(X)
max(X)
mean(X)
sd(X)
```

Pour calculer les quantiles on peut utiliser la fonction `quantile()` en paramétrant la valeur de fréquence cumulée ascendante

- **quantile(X,0)**     : minimum
- **quantile(X,0.10)**  : D1 (premier décile)
- **quantile(X,0.25)**  : Q1 (premier quartile)
- **quantile(X,0.5)**   : Q2 (médiane)
- **quantile(X,0.75)**  : Q3 (troisième quartile)
- **quantile(X,0.90)**  : D9 (dernier décile)
- **quantile(X,1)**     : maximum



```{r}
X<-don$FEC
quantile(X,0.5)
sel<-c(0,0.25,0.5,0.75,1)
quantile(X,sel)
sel<-c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1)
quantile(X,sel)
```

Il peut arriver qu'une fonction soit manquante dans R, comme par exemple le coefficient de variation. Dans ce cas, on peut faire le calcul par des lignes de code ou **créer sa propre fonction** avec l'instruction `function()`. La fonction qui est stockée en mémoire apparaît dans la fenêtre *Environnement*. Lorsqu'on a créé plusieurs fonctions, on peut en faire un programme R qu'on charge en mémoire au début de chaque session. A plus long terme, on peut en faire un **package** qu'on partagera avec les autres utilisateurs de R. 

A titre d'exemple, nous créons une fonction `cv()` qui calcule le rapport entre l'écart-type et la moyenne d'une distribution : 

```{r}
# lignes de code
X <- don$FEC
sd(X)/mean(X)

# fonction
cv<-function(var) {sd(var)/mean(var)}
cv(X)
```

### Dénombrement

Une variable quantitative peut être discrétisée avec `cut()`. Elle devient alors un facteur qu'on peut dénomber avec `table()` puis visualiseer avec `plot()` sous la forme de *diagramme en bâtons*.



```{r}
X<-cut(don$FEC, c(1,1.5,2,2.5,3,3.5))
str(X)
table(X)
```




```{r}
plot(X, col=c("green","yellow","orange","red","brown"),
     main = "Fécondité en Europe en 1988", xlab = "classes")
```


### Boîte à moustaches

La fonction `boxplot()` permet de visualiser une distribution sous forme de boîte à moustache où l'on repère facilement :

- la médiane
- les quartiles Q1 et Q3
- le minimum et le maximum
- les valeurs extrêmes situées à une distance supéreiure à 1.5 x (Q3-Q1) de la médiane


La syntaxe de base est la suivante : 

```{r}
X<-don$FEC
boxplot(X)
```

Mais on peut améliorer la figure avec quelques paramètres de plus

```{r}
boxplot(X,horizontal = TRUE, col = "gray80",
        main = "Fécondité des pays européens en 1988",
        xlab = "nb. enfants par femme")
```

Et on peut retirer les valeurs exceptionnelles avec le paramètre `outline=FALSE`

```{r}
boxplot(X,horizontal = TRUE, col = "gray80",
        main = "Fécondité des pays européens en 1988",
        xlab = "nb. enfants par femme",
        outline = FALSE)
```

### Histogramme

Dans le cas d'une variable **quantitative continue**, la visualisation la plus logique est l'histogramme que l'on peut tracer avec la fonction `hist()`. Celle-ci comporte de nombreux paramètres que l'on peut visualiser dans la **fenêtre Help** qui se trouve en bas à gauche de R-studio : 



Comme d'hebitude, on peut appliquer la syntaxe la plus simple : 


```{r}
X<-don$FEC
hist(X)
```

On peut ensuite améliorer avec l'ajout de titres et un choix précis de classes. Dans le cas de la fécondité, il est par exemple important d'utiliser le seuil de 2.1 enfants par femme qui correspond au renouvellement des générations. On remarque que si les classes sont d'amplitudes inégales R utilise la densité de probabilité (rapport entre effectif et amplitude de la classe) et non plus l'effectif ce qui est statistiquement correct (et que ne fait pas Excel ...).



```{r}
hist(X, 
     breaks = c(1.2, 1.5, 1.8, 2.1, 2.4, 3.3), 
     col=c("blue", "lightblue","lightyellow","orange","red"),
     main = "Fécondité des pays européens en 1988",
     ylab = "Densité de probabilité", 
     xlab = "Nombre d'enfants par femme",
     xlim=c(1,3.5))
```

On peut également ajouter une courbe lissée de la distribution avec les fonctions `lines() et `density()`en indiquant la portée du lissage à l'aide du paramètre `bw`(*band width*) qui est exprimé dans l'unité de mesure de X

```{r}
hist(X, 
     breaks = c(1.2, 1.5, 1.8, 2.1, 2.4, 3.3),
     col=c("blue", "lightblue","green","yellow","orange"),
     main = "Fécondité des pays européens en 1988",
     ylab = "Densité de probabilité", 
     xlab = "Nombre d'enfants par femme",
     xlim=c(1,3.5))
lines(density(X,bw=0.3),col="red",lwd=2)
```

##  Exploration III (*2 variables*)

Nous verrons en détail dans les chapitres suivants comment croiser deux variables d'un point de vue statistiques. Mais on peut déjà indiquer brièvement comment les visualiser rapidement à l'aide de trois exemples

### Deux variables qualitatives

- Tableau de contingence

```{r}
X <- don$BLOC
levels(X)<-c("Capitalise","Socialiste")
Y<-cut(don$POP, breaks=c(0,10,30,100))
levels(Y) <- c("petit","moyen","grand")
tab<-table(X,Y)
addmargins(tab)
```

- Graphique

```{r}
plot(tab, col=c("yellow","orange","brown"))
```

- Test (Chi-2)

```{r}
test<-chisq.test(X,Y)
test
```


### Deux variables quantitatives

- Paramètres principaux

```{r}
Y <- don$TMI
X<-don$PNB
summary(X)
summary(Y)
```

- Graphique

```{r}
plot(X,Y, xlab="PNB par habitant",ylab="Mortalité infantile")
text(X,Y,don$PAYS,pos = 4,cex=0.6)
```

- Test (Pearson)


```{r}
cor.test(Y,X)
```



### Une quantitative et une qualitative

- Graphique

```{r}
Y <- don$TMI
X <- as.factor(don$BLOC)
levels(X)<-c("Capitalise","Socialiste")
plot(X,Y, 
     col=c("blue","red"),
     xlab ="Mortalité infantile",
     ylab = "Bloc politique",
     horizontal=T)
```

- Test (Fischer)

```{r}
mod<-aov(Y~X)
summary(mod)
```




## En résumé


```{block, type='rmdnote'}
Nous avons survolé les principales `fonctions élémentaires` de R-Base pour montrer qu'il est facile et surtout rapide de les employer en lieu et place d'un tableur comme Excel ou d'un logiciel de statistique click-bouton. 
Il reste encore beaucoup à apprendre mais à ce stade il est important de bien consolider les acquis et de `connaître par coeur le nom des principales fonctions de base` qui ont été présentées au cours de ce chapitre. 
```


# Corrélation

{{< include _setup.qmd >}}


```{r, echo = FALSE}
library(knitr)
knitr::include_graphics("resources/figures/chap4_intro.jpg")
```


- **Mise en place** : Télécharger le [dossier exo4](https://github.com/ClaudeGrasland/bivar2023/raw/main/resources/exos/exo4.zip) et décompressez le sur votre ordinateur. Puis ouvrez le projet R `exo4.Rproj` dans Rstudio.


## Préparation des données

### Chargement du tableau principal

On charge notre bon vieux fichier des pays européens en 1988

```{r load}
don<-read.table(file = "resources/data/europe88/euro1988.csv",
                sep = ";",
                header = T)
don$BLOC<-as.factor(don$BLOC)
levels(don$BLOC)<-c("Capitaliste","Socialiste")
head(don)
```

### Choix des deux variables à analyser

En dehors de BLOC et PAYS, on ne garde que deux variables que l'on renomme X et Y avec **colnames()** et que l'on convertit en type numérique général. Il suffira par la suite de modifier le choix des variables X et Y pour faire d'autres analyses. 

```{r}
eur<-don[,c("PAYS","BLOC","URB","TMI")]
colnames(eur)<-c("PAYS","BLOC","X","Y")
eur$X<-as.numeric(eur$X)
eur$Y<-as.numeric(eur$Y)
head(eur)
```

### On est malin ...

Mais comme on ne sait plus ce que sont X et Y, on le précise avec des chaînes de caractères qu'on pourra utiliser dans les graphiques. Et on peut préparer une version multilangue ...

```{r}
# Pour la version française
fr_titre <- "Les pays européens en 1988"
fr_nomX <- "Taux d'urbanisation en %"
fr_nomY <- "Taux de mortalité infantile en p. 1000"
fr_auteur <- "Claude Grasland, Université Paris Diderot, 2020"
```

```{r}
# Pour la version arabe
ar_titre <- "البلدان الأوروبية في عام 1988"
ar_nomX <-  "معدل التحضر في المائة"
ar_nomY <- "معدل وفيات الرضع في عام 1000"
ar_auteur <- "كلود غراسلاند، جامعة باريس ديدرو، 2020"
```


```{r}
# Pour la version anglaise
en_titre <- "European countries in 1988"
en_nomX <- "Urbanisation rate %"
en_nomY <- "Infant mortality rate p. 1000"
en_auteur <- "Claude Grasland, University Paris Diderot, 2020"
```


```{r}
# Pour la version russe
ru_titre <- "Европейские страны в 1988 году"
ru_nomX <- "Уровень урбанизации в %"
ru_nomY <- "Коэффициент младенческой смертности в 1000 году"
ru_auteur <- "Клод Грассленд, Парижский университет Дидро, 2020"
```

### On est paresseux ...

Comme on prévoit qu'il y aura des différences entre pays socialistes et capitalistes, on crée deux sous-tableaux

```{r}
eur_soc<-eur[eur$BLOC=="Socialiste",]
eur_cap<-eur[eur$BLOC=="Capitaliste",]
```


## Exploration visuelle

### Visualisation avec plot(X,Y)

La manière la plus simple d'analyser la relation entre X et Y est d'utiliser un simple plot

```{r}
plot(eur$X,eur$Y)
```


La fonction plot() comporte de nombreux paramètres permettant d'améliorer le graphique et de l'habiller. Voici un exemple d'habillage en français

```{r, eval}
plot(eur$X,eur$Y,
     main = fr_titre,   # titre
     cex.main = 1,      # police du titre
     sub = fr_auteur,   # sous-titre
     cex.sub = 0.6,     # police du sous-titre
     xlab = fr_nomX,    # nom de l'axe X
     xlim = c(20,100),   # intervalle de l'axe X
     ylab = fr_nomY,    # nom de l'axe Y
     ylim = c(0,50),    # intervalle de l'axe Y
     cex.axis = 0.8,    # police des gradations d'axes
     cex.lab = 0.8,     # police des noms d'axes
     cex = 0.6,         # taille des symboles
     col = "blue")       # couleur des symboles
```





Ou en anglais: il suffit de changer le nom des variables relatives aux titres.

```{r}
plot(eur$X,eur$Y,
     main = en_titre,   # titre
     cex.main = 1,      # police du titre
     sub = en_auteur,   # sous-titre
     cex.sub = 0.5,     # police du sous-titre
     xlab = en_nomX,    # nom de l'axe X
     xlim = c(20,100),   # intervalle de l'axe X
     ylab = en_nomY,    # nom de l'axe Y
     ylim = c(0,50),    # intervalle de l'axe Y
     cex.axis = 0.7,    # police des gradations d'axes
     cex.lab = 0.7,     # police des noms d'axes
     cex = 0.6,         # taille des symboles
     col = "blue")       # couleur des symboles
```











### Identification des points avec **cor** +  **text(...)** 

On peut ajouter au graphique généré par **plot(X,Y)** une couche de labels avec **text(X,Y,Code)**. On précise la position avec **pos =**, la taille de police avex **cex =** et la couleur avec **col =**.

```{r}
plot(x = eur$X,
     y = eur$Y,
     cex=0.5,
     col= "blue",
     ylim =c(0,50))
text(x = eur$X,
     y = eur$Y,
     label = eur$PAYS,
     cex = 0.7,
     pos=3,
     col = "blue")
```



### Ajout de lignes horizontales ou verticales avec **cor()** +  **abline(...)**

On peut rajouter à un graphique des lignes horizontales ou verticales avec abline en précisant leur position avec **h=** ou **v=**, leur épaisseur avec **lwd = **, leur style avec **lty=** et leur couleur avec **col=**




```{r}
plot(eur$X,eur$Y,
     main = fr_titre,   # titre
     cex.main = 1,      # police du titre
     sub = fr_auteur,   # sous-titre
     cex.sub = 0.6,     # police du sous-titre
     xlab = fr_nomX,    # nom de l'axe X
     xlim = c(20,100),   # intervalle de l'axe X
     ylab = fr_nomY,    # nom de l'axe Y
     ylim = c(0,50),    # intervalle de l'axe Y
     cex.axis = 0.8,    # police des gradations d'axes
     cex.lab = 0.8,     # police des noms d'axes
     cex = 0.6,         # taille des symboles
     col = "blue")       # couleur des symboles

# Ajout d'une ligne horizontale  correspondant à la moyenne de Y
abline(h=mean(eur$Y),col="red",lwd = 1, lty = 2)
# Ajout d'une ligne verticlae  correspondant à la moyenne de X
abline(v=mean(eur$X),col="red",lwd = 1, lty = 2)

text(x = eur$X,
     y = eur$Y,
     label = eur$PAYS,
     cex = 0.6,
     pos=3,
     col = "blue")

```



La fonction **abline()** peut servir aussi à tracer la droite de régression Y=aX+b produite par la fonction **lm()**

```{r, echo = TRUE}
plot(eur$X,eur$Y)
maregression = lm(eur$Y~eur$X)
abline(maregression,col="red")
```

### Au delà de R-Base ...

Il existe des packages spécialisés permettant de faire des graphiques plus sophistiqués. Mais on les apprendra ultérieuement. Juste un exemple :

```{r, message=FALSE}
library(car)
scatterplot(eur$X,eur$Y)
```



## Coefficients de corrélation

### Définition

#### Relation linéaire/monotone/complexe


- il existe une **relation linéaire** entre deux variables quantitatives X et Y si l'on peut prédire leurs valeurs respectives par les fonctions **Y = a1.X + b1** et **X = a2.X = b2**

- il existe une **relation monotone** entre deux variables quantitatives X et Y si l'on peut prédire les valeurs Y en fonction de celle de X far une **fonction Y=f(X)** qui est **strictement croissante** ou **strictement décroissante**.

- il existe une **relation complexe** entre deux variables quantitatives X et Y si l'on peut prédire les valeurs Y en fonction de celle de X par une **fonction Y=f(X)** qui comporte au moins un point minimum ou maximum de changement de pente (**annulation de la dérivée première**)



```{r, echo=FALSE}
par(mfrow=c(1,3),mar=c(4,4,2,2))
X<-c(1,2,3,4,5,6,7,8,9)
Y1<-c(4,8,12,16,20,24,28,32,36)
plot(X,Y1, xlim=c(0,10),ylim=c(0,40),main="rel. linéaire",col="red")

Y2<-c(4,5,7,10,14,19,25,32,40)
plot(X,Y2, xlim=c(0,10),ylim=c(0,40), main="rel. monotone",col="red")
Y3<-c(40,20,10,5,2.5,5,10,20,40)
plot(X,Y3, xlim=c(0,10),ylim=c(0,40),main="rel. complexe", col="red")

```

#### Relation positive/négative/nulle

- Une relation linéaire ou monotone est **positive** si à un accroissement de X correspond un accroissement de Y

- Une relation linéaire ou monotone est **négative** si à un accroissement de X correspond une diminution de Y

- une relation est **nulle** si une variation de X n'entraine pas de variation de Y



```{r, echo=FALSE}
par(mfrow=c(1,3),mar=c(4,4,2,2))
X<-c(1,2,3,4,5,6,7,8,9)
Y1<-c(2,8,10,18,14,24,25,27,33)
plot(X,Y1, xlim=c(0,10),ylim=c(0,40),main="rel. positive",col="red")
abline(lm(Y1~X),col="blue")
Y2<-c(33, 27, 25, 24, 14, 18, 10, 8, 2)
plot(X,Y2, xlim=c(0,10),ylim=c(0,40), main="rel. négative",col="red")
abline(lm(Y2~X),col="blue")
Y3<-c(26,18, 15, 25, 21,18, 24, 28,16)
plot(X,Y3, xlim=c(0,10),ylim=c(0,40),main="rel. nulle", col="red")
abline(lm(Y3~X),col="blue")

```


#### Relation forte/faible/nulle

- Une relation linéaire  est **forte** si une valeur de X permet de prédire la valeur de Y avec une faible marge d'erreur.

- Une relation linéaire ou monotone est **faible** si une valeur de X permet de prédire la valeur de Y avec une forte marge d'erreur.

- une relation linéaire est **nulle** si une valeur de X ne permet aucunement de prédire la valeur de Y



```{r, echo=FALSE}
library(car)
par(mfrow=c(1,3),mar=c(4,4,2,2))
X<-runif(n=100)*10
Y<-3*X+2
Y1 = Y+runif(n=100, min=-2,max=+2)
plot(X,Y1,xlim=c(0,10),ylim=c(0,40),main="rel.forte",col="red")
abline(lm(Y1~X),col="blue")
Y2 = Y+runif(n=100, min=-10,max=+10)
plot(X,Y2,xlim=c(0,10),ylim=c(0,40),main="rel.faible",col="red")
abline(lm(Y2~X),col="blue")
Y3 = runif(n=100, min=10,max=30)
plot(X,Y3,xlim=c(0,10),ylim=c(0,40),main="rel.nulle",col="red")
abline(lm(Y3~X),col="blue")
```

#### Relation significative/non siginificative

- Une relation linéaire est **significative** si l'effectif permettant de la mettre en évidence est suffisamment grand pour qu'on puisse exclure qu'elle soit l'effet du hasard.

- Une relation linéaire ou monotone est **non significative** si l'effectif permettant de la mettre en évidence n'est pas suffisamment grand pour qu'on puisse exclure qu'elle soit l'effet du hasard.

- On considère traditionnellement qu'une relation est significative s'il y a **moins de 5% de chances** qu'elle soit l'effet du hasard (**p-value < 0.05**).



```{r, echo=FALSE}
library(car)
par(mfrow=c(1,3),mar=c(4,4,2,2))
X<-runif(n=4)*10
Y<-3*X+10
Y1 = Y+runif(n=4, min=-5,max=+5)
plot(X,Y1,xlim=c(0,10),ylim=c(0,40),main="rel.non signif.",col="red")
abline(lm(Y1~X),col="blue")


X<-runif(n=10)*10
Y<-3*X+10
Y2 = Y+runif(n=10, min=-15,max=+15)
plot(X,Y2,xlim=c(0,10),ylim=c(0,40),main="rel.signif.",col="red")
abline(lm(Y2~X),col="blue")

X<-runif(n=100)*10
Y<-3*X+10
Y3 = Y+runif(n=20, min=-20,max=+20)
plot(X,Y3,xlim=c(0,10),ylim=c(0,40),main="rel.très signif.",col="red")
abline(lm(Y3~X),col="blue")


```

### La fonction **cor()** 

- La fonction **cor()** permet de mesurer le coefficient de corrélation  de deux variable X et Y.
- Elle permet de détecter les **relations linéaires** en choisissant le paramètre (par défaut) **method = pearson**  
- Elle permet de détecter **les relations non linéaires** en choisissant le paramètre **method = spearman** qui mesure l'existence d'une **relation monotone** entre les rangs de X et Y


- La syntaxe de la fonction **cor()** est très simple et permet de calculer trois types de corrélation. La méthode par défaut est **pearson** c'est-à-dire le coefficient de corrélation linéaire

```{r}
cor(eur$X,eur$Y)
cor(eur$X,eur$Y, method = "spearman")
cor(eur$X,eur$Y, method = "kendall")


```

 **cor()** permet de savoir si la relation est linéaire ou monotone

```{r, echo=FALSE}
par(mfrow=c(1,2),mar=c(4,4,2,2))
X<-c(1,2,3,4,5,6,7,8,9)
Y<-c(4,8,12,16,20,24,28,32,36)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")

X<-c(1,2,3,4,5,6,7,8,9)
Y<-c(1,2,4,8,16,32,64,128,254)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")
```


**cor()** permet de repérer l'effet d'une valeur exceptionnelle


```{r, echo=FALSE}
par(mfrow=c(1,2),mar=c(4,4,2,2))

X<-c(1,2,3,4,5,6,7,8,50)
Y<-c(10,9,8,7,6,5,4,3,50)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")


rankX<-rank(X)
rankY<-rank(Y)
pears<-cor(rankX,rankY,method = "pearson")
spear<-cor(rankX,rankY,method = "spearman")
titre<-paste("Pears=", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(rankX,rankY, main = titre, col="red", cex.main=0.9)
abline(lm(rankY~rankX),col="blue")
```

 **cor()** permet de savoir si la relation est positive ou négative

```{r, echo=FALSE}
par(mfrow=c(1,2),mar=c(4,4,2,2))
X<-c(1,2,3,4,5,6,7,8,9)
Y<-c(2,8,10,18,14,24,25,27,33)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")

X<-c(1,2,3,4,5,6,7,8,9)
Y<-c(33, 27, 25, 24, 14, 18, 10, 8, 2)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")
```

**cor()** permet de avoir si la relation est forte ou faible

```{r, echo=FALSE}

par(mfrow=c(1,3),mar=c(4,4,2,0))

X<-runif(n=100)*10
Y<-3*X+2
Y = Y+runif(n=100, min=-2,max=+2)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")

X<-runif(n=100)*10
Y<-3*X+2
Y = Y+runif(n=100, min=-10,max=+10)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")

X<-runif(n=100)*10
Y<-3*X+2
Y = Y+runif(n=100, min=-30,max=+30)
pears<-cor(X,Y,method = "pearson")
spear<-cor(X,Y,method = "spearman")
titre<-paste("Pears= ", round(pears,digits = 2)," / Spear=", round(spear,digits=2))
plot(X,Y, main = titre, col="red",cex.main=0.9)
abline(lm(Y~X),col="blue")
```

### La fonction cor.test() 

- la fonction **cor()** permet de savoir si une relation est forte ou faible, positive ou négative, linéaire ou non linéaire. Mais **cor()** ne permet pas de savoir si une relation est significative ou pas.
- C'est la fonction **cor.test()** qui permet de **tester la significativité d'une relation** en fournissant un **intervalle de confiance du coefficient de corrélation** et une probabilité de rejet de H0 : il n'y a pas de relation appelée en anglais la **p-value**.

- p-value > 0.10 : relation non significative
- 0.10 > p-value > 0.05 : relation presque significative
- p-value < 0.05 : relation significative
- p-value < 0.01 : relation très significative

Même syntaxe que cor() :

```{r}
cor.test(eur$Y,eur$X)


cor.test(eur$Y,eur$X, method="spearman")
```


### En résumé : intensité ou significativité ?

- Le carré du coefficient de corrélation appelé **r-square** ou **r2** permet de mesurer le pouvoir explicatif de X par rapport à Y. Il ne dépend pas du nombre d'observations.
- le test de significativité ou **p-value** mesure la significativité de la relation c'est-à-dire le fait que la relation entre X et Y ne soit pas l'effet du hasard. Il dépend à la fois du niveau de corrélation et du nombre d'observations.


- A gauche : une relation forte mais non significative
- A droite : une relation faible mais très significative

```{r, echo=FALSE}
par(mfrow=c(1,2),mar=c(4,4,2,2))

X <- c(1,4,5,7,10)
Y <-c(29,32,24,12,14)
t<-cor.test(X,Y)
titre<-paste("r2 = ",round(100*(cor(X,Y)**2),2), "% / p-value = ",round(t$p.value,4), sep="")
plot(X,Y,main=titre,cex.main=0.8,col="red")
abline(lm(Y~X),col="blue")




X<-runif(n=100)*10
Y<- -3*X+50
Y = Y+runif(n=100, min=-20,max=+20)
t<-cor.test(X,Y)
titre<-paste("r2 = ",round(100*(cor(X,Y)**2),2), "% / p-value = ",round(t$p.value,4), sep="")
plot(X,Y,main=titre,cex.main=0.8,col="red")
abline(lm(Y~X),col="blue")



```



Analysez le  diagramme suivant : 

```{r, echo=FALSE}
par(mfrow=c(1,1),mar=c(4,4,3,2))
X <- eur$X
Y <- eur$Y
t<-cor.test(X,Y)
titre<-paste("r2 = ",round(100*(cor(X,Y)**2),2), "% / p-value = ",round(t$p.value,4), sep="")
plot(X,Y,main=titre,cex.main=0.8,col="red",sub="pays socialistes",cex.sub=0.7,xlab=fr_nomX,ylab=fr_nomY,cex.lab=0.7,cex.axis=0.7,cex=0)

abline(lm(Y~X),col="blue")
text(X,Y,eur$PAYS,cex=0.6,col="red")



```


Analysez les deux diagrammes suivants : 

```{r, echo=FALSE}
par(mfrow=c(1,2),mar=c(4,4,3,2))
X <- eur_soc$X
Y <- eur_soc$Y
t<-cor.test(X,Y)
titre<-paste("r2 = ",round(100*(cor(X,Y)**2),2), "% / p-value = ",round(t$p.value,4), sep="")
plot(X,Y,main=titre,cex.main=0.8,col="red",sub="pays socialistes",cex.sub=0.7,xlab=fr_nomX,ylab=fr_nomY,cex.lab=0.7,cex.axis=0.7,cex=0)

abline(lm(Y~X),col="blue")
text(X,Y,eur_soc$PAYS,cex=0.6,col="red")



X <- eur_cap$X
Y <- eur_cap$Y
t<-cor.test(X,Y)
titre<-paste("r2 = ",round(100*(cor(X,Y)**2),2), "% / p-value = ",round(t$p.value,4), sep="")
plot(X,Y,main=titre,cex.main=0.8,col="red", sub = "pays capitalistes",cex.sub=0.7, xlab=fr_nomX,ylab=fr_nomY,cex.lab=0.7,cex.axis=0.7,cex=0)
abline(lm(Y~X),col="blue")
text(X,Y,eur_cap$PAYS,cex=0.6,col="red")



```

## Matrice de corrélation

### Objectif de l'analyse

- Soit un ensemble de variables quantitatives continues **$(X_1...X_i...X_k)$** décrivant les **mêmes individus**.

- On se propose de construire la matrice **$R_{ij}[1...i...k ; 1...j...k]$** indiquant pour chaque paire de variable $ij$ leur **coefficient de corrélation** (linéaire ou de rang)

- Puis de construire la matrice **$p_{ij}[1...i...k ; 1...j...k]$** indiquant pour chaque paire de variable $ij$ la probabilité H0 d'absence de relation, c'est-à-dire le degré de **significativité** de la corrélation. 

### Utilisation des résultats

1. Mettre en évidence des **groupes de variables significativement corrélées entre elles**, que ce soit de façon positive ou négative. 

2. Préparer la réalisation d'une **analyse en composantes principales** qui regroupera les variables corrélées entre elles en facteurs.

3. Identifier des variables non redondantes pour construire un modèle de **régression multiple**.

4. Indentifier des variables fortement corrélées pouvant servir de proxy pour estimer des **valeurs manquantes** dans un tableau

### Visualisation d'une matrice de corrélation

_ Sous la forme de **tableaux** montrant si possible à la fois les coefficients de corrélation et les seuils de significativité.

- Sous la forme de **graphes** montrant de façon visuelle l'intesité, le signe et la significativité des relations.

- Sous la forme de **plans factoriels** résultant d'une analyse en composantes principales.

Chacun de ces objectifs supposant en général l'emploi de packages spécialisés.

### Exemple : création d'un tableau quantitatif

On ne sélectionne que des variables quantitatives et on ajoute les noms des pays en attribut des lignes.

```{r}
tab<-don[,c("PNB","TMI","ESP","URB","NAT","MOR","FEC")]
row.names(tab)<-don$PAYS
head(tab,3)
```


On calcule la corrélation

```{r}
resul<-cor(tab)
str(resul)
```



On affiche la matrice de corrélation en arrondissant les valeurs

```{r}
round(resul,3)
```

### Utilisation du  package psych

La fonction *cor.test()* de Rbase ne permet pas de calculer les corrélations pour toute une matrice. Aussi on charge le package **psych** qui dispose d'une fonction *corr.test()* beaucoup plus puissante qui crée plusieurs matrices de résultats

```{r}
library(psych)
results<-psych::corr.test(tab)
names(results)
```


On retrouve la matrice des coefficiences de corrélation 

```{r}
round(results$r,3)
```


Mais aussi la matrice des tests de significativité

```{r}
round(results$p,3)
```


On peut aussi faire une jolie matrice colorée avec des tests de signficativité sous forme d'étoiles

```{r}
corPlot(tab, stars=TRUE, diag=FALSE)
```

### Utilisation du package factoMineR

Si on veut voir les axes factoriels d'une analyse en composante principales on utilise la fonction *PCA()* de **FactoMineR**

```{r}
library(FactoMineR)
monacp<-PCA(tab, graph=FALSE)
```

On pourra ensuite visualiser la corrélation des variables avec les principaux axes factoriels et les coordonnées des individus sur ceux-ci.

#### Corrélation des variables avec les axes factoriels

```{r}
plot.PCA(monacp,choix = "varcor")
```

#### Coordonnées des individus sur les axes factoriels


```{r}
plot.PCA(monacp,choix = "ind",)
```











